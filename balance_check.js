const ethers = require("ethers");
const fs = require("fs");
const vote = require("./main");
const logToFile = require("./log");
require("dotenv").config();



const filename = "wallets.txt";
const providers = {
    Optimism: {
        provider: new ethers.JsonRpcProvider(process.env.OPTIMISM_RPC),
        contract: "0x27Af77A7B70DF78E4F112c413A48C9784a27EC2a",
    },
    Arbitrum: {
        provider: new ethers.JsonRpcProvider(process.env.ARBITRUM_RPC),
        contract: "0xd5b450646037a9d98F4A6705b2D0D1Da44E629d0",
    },
    Base: {
        provider: new ethers.JsonRpcProvider(process.env.BASE_RPC),
        contract: "0x903b8a6c26afd8c20a91c988266ef93c1d52640f",
    },
    Polygon: {
        provider: new ethers.JsonRpcProvider(process.env.POLYGON_RPC),
        contract: "0x037bca7e8be0ab1e7ea145dff7e46b64214d613f",
    },
};




function getRandomDelay(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

async function randomDelay(min, max) {
    const delay = getRandomDelay(min, max);
    logToFile(`–ó–∞–¥–µ—Ä–∂–∫–∞: ${delay} –º—Å`);
    return new Promise((resolve) => setTimeout(resolve, delay));
}

async function checkBalance(walletpriv) {
    try {
        const wallet = new ethers.Wallet(walletpriv);
        const address = wallet.address;
        console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞: ${address}`);
        logToFile(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞: ${address}`);

        for (const [network, { provider, contract }] of Object.entries(providers)) {
            try {
                const balance = await provider.getBalance(address);
                const formattedBalance = parseFloat(ethers.formatEther(balance));
                console.log(`üåê –°–µ—Ç—å: ${network}`);
                console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${formattedBalance.toFixed(6)} ETH`);
                logToFile(`üåê –°–µ—Ç—å: ${network}, üí∞ –ë–∞–ª–∞–Ω—Å: ${formattedBalance.toFixed(6)} ETH`);

                if (formattedBalance >= 0.00023) {
                    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!`);
                    console.log(`üîó –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${contract}`);
                    logToFile(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ —Å–µ—Ç–∏ ${network}. –ö–æ—à–µ–ª–µ–∫: ${address}`);
                    await vote(contract, wallet, provider);
                    break; 
                }
            } catch (err) {
                console.error(
                    `‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Ç–∏ ${network} –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ ${address}: ${err.message}`
                );
                logToFile(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Ç–∏ ${network} –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ ${address}: ${err.message}`);
            }
        }
    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ${walletpriv} - ${err.message}`);
        logToFile(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ${walletpriv} - ${err.message}`);
    }
}

async function processWallets() {
    try {
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        const privateKeys = fs
            .readFileSync(filename, "utf8")
            .split("\n")
            .filter(Boolean); 

        console.log(`üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${privateKeys.length} –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`);
        logToFile(`üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${privateKeys.length} –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`);

        
        for (const key of privateKeys) {
            console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞...`);
            logToFile(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞...`);
            await checkBalance(key.trim());
            await randomDelay(process.env.DELAY_MIN, process.env.DELAY_MAX);
            console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...`);
            logToFile(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...`);
        }

        console.log(`‚úÖ –í—Å–µ –∫–æ—à–µ–ª—å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.`);
        logToFile(`‚úÖ –í—Å–µ –∫–æ—à–µ–ª—å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.`);
    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: ${err.message}`);
        logToFile(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: ${err.message}`);
    }
}

processWallets()

